#!/bin/bash

: "${BASH_LIB_DIR:?BASH_LIB_DIR must be set. Please source bash-lib/init before other scripts from bash-lib.}"

function bl_die(){
    bl_fatal "${@}"
    exit 1
}

function bl_fail(){
    bl_error "${@}"
    return 1
}

#safe pushd
function bl_spushd(){
    if ! pushd "${1}" >/dev/null; then
        bl_die "pushd ${1} failed :("
    fi
}

#safe popd
function bl_spopd(){
    popd >/dev/null || bl_die "popd failed :("
}

# Test if a variable contains a number
function bl_is_num(){
    [[ ${1:-invalid} =~ ^-?[0-9\.]*$ ]]
}

# Retry a command multiple times until it succeeds, with escalating
# delay between attempts.
# Delay is 2 * n + random up to 30s, then 30s + random after that.
# For large numbers of retries the max delay is effectively the retry
# count in minutes.
# Based on:
# https://gist.github.com/sj26/88e1c6584397bb7c13bd11108a579746
# but now quite heavily modified.
function bl_retry {
    # Maxiumum amount of fixed delay between attempts
    # a random value will still be added.
    local -r MAX_BACKOFF=30
    local rc
    local count
    local retries
    local backoff

    if [[ ${#} -lt 2 ]]; then
        bl_die "retry usage: retry <retries> <command>"
    fi

    retries=$1
    shift

    if ! bl_is_num "${retries}"; then
        bl_die "Invalid number of retries: ${retries} for command '${*}'".
    fi

    count=0
    until eval "$@"; do
        # Command failed, otherwise until would have skipped the loop

        # Store return code so it can be reported to the user
        rc=$?
        count=$((count + 1))
        if [ "${count}" -lt "${retries}" ]; then
            # There are still retries left, calculate delay and notify user.
            backoff=$((2 * count))
            if [[ "${backoff}" -gt "${MAX_BACKOFF}" ]]; then
                backoff=${MAX_BACKOFF}
            fi;

            # Add a random amount to the delay to prevent competing processes
            # from re-colliding.
            wait=$(( backoff + (RANDOM % count) ))
            bl_info "'${*}' Retry $count/$retries exited $rc, retrying in $wait seconds..."
            sleep $wait
        else
            # Out of retries :(
            bl_error "Retry $count/$retries exited $rc, no more retries left."
            return $rc
        fi
    done
    return 0
}

# retry function that waits a constant number of seconds between attempts.
function bl_retry_constant {
    if [[ ${#} -lt 3 ]]; then
        bl_die "retry usage: retry <retries> <interval (seconds)> <command>"
    fi

    local retries=$1; shift
    local interval=$1; shift
    local count
    local rc
    local interval

    if ! bl_is_num "${retries}"; then
        bl_die "Invalid number of retries: ${retries} for command '${*}'"
    fi

    if ! bl_is_num "${interval}"; then
        bl_die "Invalid interval in seconds: ${retries} for command '${*}'".
    fi

    count=0
    until eval "$@"; do
        # Command failed, otherwise until would have skipped the loop

        # Store return code so it can be reported to the user
        rc=$?
        count=$((count + 1))
        if [ "${count}" -lt "${retries}" ]; then
            bl_info "'${*}' Retry $count/$retries exited $rc, retrying in $interval seconds..."
            sleep "${interval}"
        else
            # Out of retries :(
            bl_error "Retry $count/$retries exited $rc, no more retries left."
            return $rc
        fi
    done
    return 0
}
